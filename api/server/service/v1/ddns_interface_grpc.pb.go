// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: v1/ddns_interface.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DDNSInterfaceClient is the client API for DDNSInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DDNSInterfaceClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	Cancel(ctx context.Context, in *CancelReq, opts ...grpc.CallOption) (*CancelReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	ListDomainName(ctx context.Context, in *ListDomainNameReq, opts ...grpc.CallOption) (*ListDomainNameReply, error)
	CreateDomainName(ctx context.Context, in *CreateDomainNameReq, opts ...grpc.CallOption) (*CreateDomainNameReply, error)
	DeleteDomainName(ctx context.Context, in *DeleteDomainNameReq, opts ...grpc.CallOption) (*DeleteDomainNameReply, error)
	ListDevice(ctx context.Context, in *ListDeviceReq, opts ...grpc.CallOption) (*ListDeviceReply, error)
	CreateDevice(ctx context.Context, in *CreateDeviceReq, opts ...grpc.CallOption) (*CreateDeviceReply, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceReq, opts ...grpc.CallOption) (*DeleteDeviceReply, error)
}

type dDNSInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewDDNSInterfaceClient(cc grpc.ClientConnInterface) DDNSInterfaceClient {
	return &dDNSInterfaceClient{cc}
}

func (c *dDNSInterfaceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) Cancel(ctx context.Context, in *CancelReq, opts ...grpc.CallOption) (*CancelReply, error) {
	out := new(CancelReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) ListDomainName(ctx context.Context, in *ListDomainNameReq, opts ...grpc.CallOption) (*ListDomainNameReply, error) {
	out := new(ListDomainNameReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/ListDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) CreateDomainName(ctx context.Context, in *CreateDomainNameReq, opts ...grpc.CallOption) (*CreateDomainNameReply, error) {
	out := new(CreateDomainNameReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/CreateDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) DeleteDomainName(ctx context.Context, in *DeleteDomainNameReq, opts ...grpc.CallOption) (*DeleteDomainNameReply, error) {
	out := new(DeleteDomainNameReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/DeleteDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) ListDevice(ctx context.Context, in *ListDeviceReq, opts ...grpc.CallOption) (*ListDeviceReply, error) {
	out := new(ListDeviceReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/ListDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) CreateDevice(ctx context.Context, in *CreateDeviceReq, opts ...grpc.CallOption) (*CreateDeviceReply, error) {
	out := new(CreateDeviceReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSInterfaceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceReq, opts ...grpc.CallOption) (*DeleteDeviceReply, error) {
	out := new(DeleteDeviceReply)
	err := c.cc.Invoke(ctx, "/server.service.v1.DDNSInterface/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDNSInterfaceServer is the server API for DDNSInterface service.
// All implementations must embed UnimplementedDDNSInterfaceServer
// for forward compatibility
type DDNSInterfaceServer interface {
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	Cancel(context.Context, *CancelReq) (*CancelReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	ListDomainName(context.Context, *ListDomainNameReq) (*ListDomainNameReply, error)
	CreateDomainName(context.Context, *CreateDomainNameReq) (*CreateDomainNameReply, error)
	DeleteDomainName(context.Context, *DeleteDomainNameReq) (*DeleteDomainNameReply, error)
	ListDevice(context.Context, *ListDeviceReq) (*ListDeviceReply, error)
	CreateDevice(context.Context, *CreateDeviceReq) (*CreateDeviceReply, error)
	DeleteDevice(context.Context, *DeleteDeviceReq) (*DeleteDeviceReply, error)
	mustEmbedUnimplementedDDNSInterfaceServer()
}

// UnimplementedDDNSInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedDDNSInterfaceServer struct {
}

func (UnimplementedDDNSInterfaceServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDDNSInterfaceServer) Cancel(context.Context, *CancelReq) (*CancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedDDNSInterfaceServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDDNSInterfaceServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedDDNSInterfaceServer) ListDomainName(context.Context, *ListDomainNameReq) (*ListDomainNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainName not implemented")
}
func (UnimplementedDDNSInterfaceServer) CreateDomainName(context.Context, *CreateDomainNameReq) (*CreateDomainNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomainName not implemented")
}
func (UnimplementedDDNSInterfaceServer) DeleteDomainName(context.Context, *DeleteDomainNameReq) (*DeleteDomainNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomainName not implemented")
}
func (UnimplementedDDNSInterfaceServer) ListDevice(context.Context, *ListDeviceReq) (*ListDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevice not implemented")
}
func (UnimplementedDDNSInterfaceServer) CreateDevice(context.Context, *CreateDeviceReq) (*CreateDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDDNSInterfaceServer) DeleteDevice(context.Context, *DeleteDeviceReq) (*DeleteDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDDNSInterfaceServer) mustEmbedUnimplementedDDNSInterfaceServer() {}

// UnsafeDDNSInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DDNSInterfaceServer will
// result in compilation errors.
type UnsafeDDNSInterfaceServer interface {
	mustEmbedUnimplementedDDNSInterfaceServer()
}

func RegisterDDNSInterfaceServer(s grpc.ServiceRegistrar, srv DDNSInterfaceServer) {
	s.RegisterService(&DDNSInterface_ServiceDesc, srv)
}

func _DDNSInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).Cancel(ctx, req.(*CancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_ListDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).ListDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/ListDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).ListDomainName(ctx, req.(*ListDomainNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_CreateDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).CreateDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/CreateDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).CreateDomainName(ctx, req.(*CreateDomainNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_DeleteDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).DeleteDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/DeleteDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).DeleteDomainName(ctx, req.(*DeleteDomainNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_ListDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).ListDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/ListDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).ListDevice(ctx, req.(*ListDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).CreateDevice(ctx, req.(*CreateDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSInterface_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSInterfaceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.service.v1.DDNSInterface/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSInterfaceServer).DeleteDevice(ctx, req.(*DeleteDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DDNSInterface_ServiceDesc is the grpc.ServiceDesc for DDNSInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DDNSInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.service.v1.DDNSInterface",
	HandlerType: (*DDNSInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _DDNSInterface_Register_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _DDNSInterface_Cancel_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _DDNSInterface_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _DDNSInterface_Logout_Handler,
		},
		{
			MethodName: "ListDomainName",
			Handler:    _DDNSInterface_ListDomainName_Handler,
		},
		{
			MethodName: "CreateDomainName",
			Handler:    _DDNSInterface_CreateDomainName_Handler,
		},
		{
			MethodName: "DeleteDomainName",
			Handler:    _DDNSInterface_DeleteDomainName_Handler,
		},
		{
			MethodName: "ListDevice",
			Handler:    _DDNSInterface_ListDevice_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DDNSInterface_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DDNSInterface_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ddns_interface.proto",
}
